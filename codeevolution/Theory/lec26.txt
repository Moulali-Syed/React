Pure Component:

To understand Pure Components lets create three components 

import React, { PureComponent } from 'react';

class PureComp extends PureComponent {
  render() {
    console.log('********* Pure Component ********************');
    return <div>PureComp {this.props.name}</div>;
  }
}

export default PureComp;


import React, { Component } from 'react';

class RegComp extends Component {
  render() {
    console.log('************ Regular Component ********************');
    return <div>RegComp {this.props.name}</div>;
  }
}

export default RegComp;


import React, { Component } from 'react';
import PureComp from './PureComp';
import RegComp from './RegComp';

class ParentComp extends Component {
  constructor(props) {
    super(props);

    this.state = {
      name: 'Apple',
    };
  }

  componentDidMount() {
    setInterval(() => {
      this.setState({ name: 'Apple' });
    }, 2000);
  }
  render() {
    console.log('******* Parent Component**************');
    return (
      <div>
        ParentComp
        <RegComp name={this.state.name} />
        <PureComp name={this.state.name} />
      </div>
    );
  }
}

export default ParentComp;


Now we see in console that 

        Parent
        Regular
        Pure 

        Then for every 2 seconds we see 
                    Parent
                    Regular


Regular Component   

it doesnot implement the shouldComponentUpdate method , it always returns true by default 

  Pure Component :
  It implement the shouldComponentUpdate method with a shallow props and state comparision 


  Shallow Comparision:
  we can study with respect to Primitive Types and Complex Types:

  Primitive Types:
    a (SC) b return true if a and b have the same value and are of same type 
        ex: 'apple' (sc) 'apple' returns true 


    Complex Types:
        a(SC) b returns true if a and b reference the exact same object

        var a = [1,2,3];
        var b = [1,2,3];
        var c = a;
        a==b ;//false
        a==c; //true 


Pure Component:
implements shouldComponentUpdate with a shallow prop and state comparision 
SC of prevState with currentState 
SC of prevProps with currentProps 

When shallow comparision indicates that there is a difference the component will re renders 


Never mutate the state . Always return a new object that reflects the new state 